SettlementDeduction
dcast.data.table(SettlementDeduction, transactionId ~ rowid(transactionId), value.var = 'DeductedAmount')
dcast.data.table(SettlementDeduction + paidAt, transactionId ~ rowid(transactionId), value.var = 'DeductedAmount')
dcast.data.table(SettlementDeduction  transactionId + paidAt ~ rowid(transactionId), value.var = 'DeductedAmount')
dcast.data.table(SettlementDeduction , transactionId + paidAt ~ rowid(transactionId), value.var = 'DeductedAmount')
dcast.data.table(SettlementDeduction[order(paidAt)] , transactionId ~ rowid(transactionId, 'Nr'), value.var = 'DeductedAmount')
dcast.data.table(SettlementDeduction[order(paidAt)] , transactionId ~ rowid(transactionId, prefix = 'Nr'), value.var = 'DeductedAmount')
? rowid
dcast.data.table(SettlementDeduction[order(paidAt)] , transactionId ~ rowid(transactionId, prefix = 'Nr'), value.var = 'DeductedAmount')
dcast.data.table(SettlementDeduction , transactionId ~ rowid(transactionId, prefix = 'Nr'), value.var = 'DeductedAmount')
dcast.data.table(SettlementDeduction , transactionId ~ rowid(transactionId, group = 'Nr'), value.var = 'DeductedAmount')
dcast.data.table(SettlementDeduction , transactionId ~ rowid(transactionId), value.var = 'DeductedAmount')
dcast.data.table(SettlementDeduction , transactionId ~ paidar, value.var = 'DeductedAmount')
dcast.data.table(SettlementDeduction , transactionId ~ paidaT, value.var = 'DeductedAmount')
dcast.data.table(SettlementDeduction , transactionId ~ paidAt, value.var = 'DeductedAmount')
###########################################################################################
# In this file the data manipulation will be handled, data will be sent#
# to #
###########################################################################################
options(scipen = 999)#
library(openxlsx)#
"pathSet"			<- function( x )#
{#
	if( is( x, "character"))#
	{#
		cmd				<- paste0("echo ", x)#
		cmd1			<-  pipe( cmd , open = "r")#
		path			<-   scan(cmd1, what = "character")  #
		close(cmd1)#
		return(path)#
	} else {#
	 	stop("Input is ", class( x ), " and not valid in")#
	}	#
}#
settlmentRules 	<- list( 	'cl' = 'cancelled',#
							'da' = 'AfterSettlementPeriod',#
							'dp' = 'AfterSettlementPeriodWhenPaid',#
							'ia'	= 'Immediately' ,#
							'ip' = 'ImmediatelyWhenPaid'#
	)#
#
FULLPATH		<- pathSet( x = "$PWD" )#
.HOME		<- dirname(FULLPATH)#
# Set the home diretory #
# All R-files #
RFiles 					<- list.files(path = .HOME, include.dirs = TRUE, pattern = "*.R$", #
											recursive = TRUE, full.names = TRUE)#
# Load common functions and files , DATA dir is where to send all data#
source(file = grep(".*RClass.*(?<=tion.R)", RFiles ,value = TRUE, perl = TRUE, ignore.case = TRUE) )#
hs1		<- createStyle(fgFill = "#DCE6F1", halign = "center", textDecoration = "Italic", border = "Bottom")#
#
hs2	<- createStyle(	#
		fgFill = "black", #
		fontSize = 12,#
		halign = "center", #
		textDecoration = "bold", #
			border = "Bottom")#
#
setValue 	<- function(name, colum, data, startRow = 2)#
{#
	addWorksheet( wb, name)#
	setColWidths(wb, sheet = name, cols = colum, widths = 22)#
	writeData(wb, sheet = name, data, startRow = startRow, headerStyle = hs1)#
}#
#
#system(Code)#
#
# Pkgs needed #
Packages			 	<- c("lubridate", 'data.table','reshape2', 'reshape',#
							'ggthemes', 'stargazer', 'RColorBrewer',#
							'extrafont', 'quantmod','openxlsx',#
							'ggplot2', 'scales', 'grid', 'gridExtra',"Hmisc",#
							 'dynlm', 'dplyr', 'RMySQL')#
## Set path and load pkgs#
Pack		<- new("startUps", pkgs = Packages, path = dirname(FULLPATH) )#
Pack$instant_pkgs()#
## Get the lastest rates from ExchangeRate #
Query 	<- sprintf("SELECT * FROM ExchangeRate WHERE #
				date = ( SELECT max(date) FROM ExchangeRate)")#
#
Rates 	<- getData(query = Query)#
## Change to swedish currency #
Rates[, Rates := Rates[currency == 'SEK', rate]/rate]#
Rates		<- Rates[,.(Currency = currency, Rates)]#
######################################################################################
# Load in conditions  #
######################################################################################
query					<- "select mm.*, sa.*, ss.type AS TYPE, ss.operatorId from MeacodeMerchant mm #
								inner join SettlementAccount sa using (merchantId, country)#
								inner join Site ss ON (mm.merchantId = ss.siteId)"#
#
Meacode					<- getData(query = query)#
Meacode 	<- Meacode[, .(country, operatorId , storeId, TYPE, settlementInterval, #
							settlementPeriod, settlementRule, transactionFeePercentage, #
							CondinvoiceFee = invoiceFee, #
							CondreminderFee = reminderFee)]#
Meacode[, TYPE := ifelse(grepl("RISK", TYPE), 'NoRisk', #
							ifelse(grepl("NORMAL", TYPE), "Risk", TYPE) )]#
Meacode[grepl("Risk", TYPE), Risk := 1]			#
Meacode[grepl("NoRisk", TYPE), Risk := 0]#
#
Meacode[grepl("store" , storeId), operatorId := 'Store']#
Company	<- list( 'UK' = c(	"comeon","bertil", "vinnarum", #
							"casinoroom","redkings","svenskalottoportalen",#
							"3hholdings","garantispelet","videoslots",#
							"europaspelet","garantispelet","supervinsten",#
							"superspelet") )#
#################################################################################### 			#
# MySQL cmds #
# dbListTables(con) = list all tables in above connection#
# dbListFields(con, DBtable) = list of all columns in table#
####################################################################################	#
## This is by each transaction#
StartDate		<- "2013-05-14"#
CurrentDate		<- Sys.Date( )#
Query	<- sprintf("SELECT tr.siteId, #
							tr.invoiceCurrency AS Currency,#
							tr.ocrNumber, #
							tr.playerId,#
							tr.status,#
							et.* FROM ErpTransaction et #
						INNER JOIN ErpInvoice tr on (tr.invoiceNumber = et.invoiceNumber)",#
					 	StartDate);#
#
Step1 		<- getData(query = Query )#
Step1		<- Step1[!siteId %like% "(kriita|3h)"]#
for( i in 1:length(settlmentRules))#
{#
	first_		<- settlmentRules[i]#
	Step1[grepl(names(first_), settlementRule), settlementRuleString :=  first_]#
}#
#
Step1		<- merge(Step1, Rates, by.x = "currency", by.y = 'Currency', all = TRUE)#
Step1 		<- Step1[!is.na(siteId)]#
#
tmpMea		<- unique(Meacode[, .(storeId , TYPE , operatorId, country, settlementInterval, #
								settlementPeriod, transactionFeePercentage)], by = 'storeId')#
#
Step1		<- merge(Step1, tmpMea, by.x = "siteId", by.y = 'storeId', all.x = TRUE )#
rm(tmpMea)#
#
ErpTransaction		<- copy(Step1)#
ErpTransaction 		<- ErpTransaction[!is.na(invoiceNumber)]#
rm(Step1)#
######## Merge with SettlementDeduction#
query 							<- 'select * from SettlementDeduction'#
SettlementDeduction				<- getData(query = query)#
setnames(SettlementDeduction, 'amount', 'DeductedAmount')
dcast.data.table(SettlementDeduction[order(paidAt)] , transactionId ~ rowid(transactionId, prefix = 'Nr'), value.var = 'DeductedAmount')
De	<- dcast.data.table(SettlementDeduction[order(paidAt)] , transactionId ~ rowid(transactionId, prefix = 'Nr'), value.var = 'DeductedAmount')
SettlementDeduction
Step1				<- SettlementDeduction[, tmpVal := paste0(DeductedAmount, " (",  paidAt,")")]
De	<- dcast.data.table(Step1[order(paidAt)] , transactionId ~ rowid(transactionId, prefix = 'Nr'), value.var = 'tmpVal')
De
setnames(SettlementDeduction, 'amount', 'DeductedAmount')#
Step1				<- SettlementDeduction[, tmpVal := paste0(DeductedAmount, " (",  paidAt,")")]
Step1				<- SettlementDeduction[, tmpVal := paste0(DeductedAmount, " (",  paidAt,")")]
Step1
De	<- dcast.data.table(Step1[order(paidAt)] , transactionId ~ rowid(transactionId, prefix = 'Nr'), value.var = 'tmpVal')
De
Step2					<- dcast.data.table(Step1[order(paidAt)] , transactionId ~ rowid(transactionId, prefix = 'Nr'), value.var = 'tmpVal')
ErpTransaction 		<- merge(ErpTransaction, Step2, by = 'transactionId', all.x = TRUE)
ErpTransaction
ErpTransaction[grepl("comeon", siteId)]
ErpTransaction[grepl("comeon", siteId)][!is.na(Nr1)]
###########################################################################################
# In this file the data manipulation will be handled, data will be sent#
# to #
###########################################################################################
options(scipen = 999)#
library(openxlsx)#
"pathSet"			<- function( x )#
{#
	if( is( x, "character"))#
	{#
		cmd				<- paste0("echo ", x)#
		cmd1			<-  pipe( cmd , open = "r")#
		path			<-   scan(cmd1, what = "character")  #
		close(cmd1)#
		return(path)#
	} else {#
	 	stop("Input is ", class( x ), " and not valid in")#
	}	#
}#
settlmentRules 	<- list( 	'cl' = 'cancelled',#
							'da' = 'AfterSettlementPeriod',#
							'dp' = 'AfterSettlementPeriodWhenPaid',#
							'ia'	= 'Immediately' ,#
							'ip' = 'ImmediatelyWhenPaid'#
	)#
#
FULLPATH		<- pathSet( x = "$PWD" )#
.HOME		<- dirname(FULLPATH)#
# Set the home diretory #
# All R-files #
RFiles 					<- list.files(path = .HOME, include.dirs = TRUE, pattern = "*.R$", #
											recursive = TRUE, full.names = TRUE)#
# Load common functions and files , DATA dir is where to send all data#
source(file = grep(".*RClass.*(?<=tion.R)", RFiles ,value = TRUE, perl = TRUE, ignore.case = TRUE) )#
hs1		<- createStyle(fgFill = "#DCE6F1", halign = "center", textDecoration = "Italic", border = "Bottom")#
#
hs2	<- createStyle(	#
		fgFill = "black", #
		fontSize = 12,#
		halign = "center", #
		textDecoration = "bold", #
			border = "Bottom")#
#
setValue 	<- function(name, colum, data, startRow = 2)#
{#
	addWorksheet( wb, name)#
	setColWidths(wb, sheet = name, cols = colum, widths = 22)#
	writeData(wb, sheet = name, data, startRow = startRow, headerStyle = hs1)#
}#
#
#system(Code)#
#
# Pkgs needed #
Packages			 	<- c("lubridate", 'data.table','reshape2', 'reshape',#
							'ggthemes', 'stargazer', 'RColorBrewer',#
							'extrafont', 'quantmod','openxlsx',#
							'ggplot2', 'scales', 'grid', 'gridExtra',"Hmisc",#
							 'dynlm', 'dplyr', 'RMySQL')#
## Set path and load pkgs#
Pack		<- new("startUps", pkgs = Packages, path = dirname(FULLPATH) )#
Pack$instant_pkgs()#
## Get the lastest rates from ExchangeRate #
Query 	<- sprintf("SELECT * FROM ExchangeRate WHERE #
				date = ( SELECT max(date) FROM ExchangeRate)")#
#
Rates 	<- getData(query = Query)#
## Change to swedish currency #
Rates[, Rates := Rates[currency == 'SEK', rate]/rate]#
Rates		<- Rates[,.(Currency = currency, Rates)]#
######################################################################################
# Load in conditions  #
######################################################################################
query					<- "SELECT mm.*, #
									ss.type AS TYPE, #
									ss.operatorId,#
									mcs.invoiceHoldPeriodRecurring,#
									mcs.invoicableStatuses FROM MeacodeMerchant mm #
						INNER JOIN Site ss ON (mm.merchantId = ss.siteId)#
						INNER JOIN MerchantCountrySettings mcs ON (mm.merchantId = mcs.merchantId AND #
																	mm.country = mcs.country)"#
#
Meacode					<- getData(query = query)#
setnames(Meacode, c('invoiceFee', 'reminderFee'), c('CondinvoiceFee', 'CondreminderFee'))#
Meacode[, TYPE := ifelse(grepl("RISK", TYPE), 'NoRisk', #
							ifelse(grepl("NORMAL", TYPE), "Risk", TYPE) )]#
Meacode[grepl("Risk", TYPE), Risk := 1]			#
Meacode[grepl("NoRisk", TYPE), Risk := 0]#
#
Meacode[grepl("store" , storeId), operatorId := 'Store']#
Meacode[, c('createdAt','expiresAt','invoiceCurrency') := NULL]#
Company	<- list( 'UK' = c(	"comeon","bertil", "vinnarum", #
							"casinoroom","redkings","svenskalottoportalen",#
							"3hholdings","garantispelet","videoslots",#
							"europaspelet","garantispelet","supervinsten",#
							"superspelet") )#
#################################################################################### 			#
# MySQL cmds #
# dbListTables(con) = list all tables in above connection#
# dbListFields(con, DBtable) = list of all columns in table#
####################################################################################	#
## This is by each transaction#
StartDate		<- "2013-05-14"#
CurrentDate		<- Sys.Date( )#
Query	<- sprintf("SELECT CONCAT(tr.merchantId, '.', LOWER(tr.country)) AS siteId ,#
							tr.invoiceCurrency AS Currency,#
							tr.ocrNumber, #
							tr.playerId,#
							tr.status,#
							tr.toAccount,#
							et.* FROM ErpTransaction et #
						INNER JOIN ErpInvoice tr on (tr.invoiceNumber = et.invoiceNumber)",#
					 	StartDate);#
#
Step1 		<- getData(query = Query )#
Step1		<- Step1[!siteId %like% "(kriita|3h)"]#
for( i in 1:length(settlmentRules))#
{#
	first_		<- settlmentRules[i]#
	Step1[grepl(names(first_), settlementRule), settlementRuleString :=  first_]#
}#
#
Step1		<- merge(Step1, Rates, by.x = "currency", by.y = 'Currency', all = TRUE)#
Step1 		<- Step1[!is.na(siteId)]#
#
tmpMea		<- unique(Meacode[, .(storeId , TYPE , operatorId, country, settlementInterval, #
								settlementPeriod, transactionFeePercentage)], by = 'storeId')#
#
Step1		<- merge(Step1, tmpMea, by.x = "siteId", by.y = 'storeId', all.x = TRUE )#
rm(tmpMea)#
#
ErpTransaction		<- copy(Step1)#
ErpTransaction 		<- ErpTransaction[!is.na(invoiceNumber)]#
rm(Step1)#
######## Merge with SettlementDeduction#
query 							<- 'select * from SettlementDeduction'#
SettlementDeduction				<- getData(query = query)#
setnames(SettlementDeduction, 'amount', 'DeductedAmount')#
SettlementDeduction[, tmpVal := paste0(DeductedAmount, " (",  paidAt,")")]#
SettlementDeduction[order(paidAt), Count := 1:.N, by = .(transactionId)]#
#
Step2				<- dcast.data.table(SettlementDeduction[order(paidAt)] , transactionId ~ Count, value.var = 'tmpVal')#
#
Names				<- colnames(Step2)#
#
Names1				<- paste0("DeductionNr_", setdiff(Names, "transactionId"))#
setnames(Step2, 2:NCOL(Step2), Names1)#
#
ErpTransaction 		<- merge(ErpTransaction, Step2, by = 'transactionId', all.x = TRUE)#
SettlementDeduction[, tmpVal := NULL]#
#
rm(Step2)#
ErpTransaction 					<- ErpTransaction[!is.na(transactionId)]#
rm( query); gc(reset = TRUE)#
## Get each transaction, mulitple invoiceNr#
Query			<- sprintf("SELECT * FROM ErpPaymentHistory where paymentDate >= '%s'", StartDate)#
Step1 			<- getData(query = Query )#
Step1[, paymentDate := as.Date(paymentDate)]#
ErpPaymentHistory 	<- copy(Step1)#
rm(Step1)#
#
## ErpInvoice with Invoice #
Query 	<- sprintf("SELECT 	ei.*,#
							iv.state,#
							IF( ei.playingCurrency = 'EUR' #
									AND ei.invoiceCurrency = 'SEK', #
										ei.originalSettlementFee*ei.conversionRate, #
											ei.originalSettlementFee) AS TransactionFee#
							FROM ErpInvoice ei #
						INNER JOIN Invoice iv ON (ei.invoiceNumber = iv.invoiceNumber)#
						WHERE createdAt >= '%s'",  StartDate)#
Step1 				<- getData(query = Query )#
Step1[is.na(TransactionFee), TransactionFee := settlementFee]#
Step1[, siteId := paste0(merchantId, '.', tolower(country))]#
#
Step1		<- Step1[!siteId %like% "(kriita|3h)"]#
Step1[, ':=' ( Bill_date 			= as.Date(createdAt),#
				dueDate 			= as.Date(dueDate),#
				Payment_date		= as.Date(closureDate),#
				firstReminderDate 	= as.Date(firstReminderDate),#
				collectionDate		= as.Date(collectionDate)#
			 )]#
#
Step1[, ':=' ( #
			Bill_month		= format(Bill_date, "%Y-%b"),#
			Payment_month	= format(Payment_date, "%Y-%b")#
)]#
#
Step1			<- merge(Step1, Rates, by.x = 'invoiceCurrency', by.y = "Currency", all = TRUE)#
#
Meacode1		<- unique(Meacode, by = 'storeId')#
ErpInvoice				<- merge(Step1, Meacode1, by.x = c('merchantId',"siteId"), by.y = c('merchantId','storeId'), all.x = TRUE)					#
ErpInvoice 				<- ErpInvoice[!is.na(personId)]#
ErpInvoice[, c( 'country.x') := NULL]#
setnames(ErpInvoice, 'country.y', 'country')#
#
## Estimate the realmoney and get the last date #
moneyDT					<-   ErpPaymentHistory[grepl('(m|r)',type) , .(money = SUM(amount), moneyDate =  paymentDate[.N]), by = .(invoiceNumber)]#
#
ErpInvoice 				<- merge(ErpInvoice, moneyDT, by = 'invoiceNumber', all.x = TRUE)#
ErpInvoice[is.na(money), money := 0]#
rm(moneyDT)
ErpPaymentHistory
compensationDT			<-  ErpPaymentHistory[grepl('c|e|p', type), .(compensation = SUM(amount), compensationDate = paymentDate[.N]), by = .(invoiceNumber)]
compensationDT
SettlementDeduction
SettlementDeduction[]
ErpTransaction[]
ErpTransaction[settlementAmountDeducted > 0]
ErpTransaction[settlementAmountDeducted > 0, .(settlementAmountDeducted, invoiceNumber,  transactionId)]
tmpComp 				<- ErpTransaction[settlementAmountDeducted > 0, .(settlementAmountDeducted, invoiceNumber,  transactionId)]
tmpComp[, SUM(settlementAmountDeducted), by = .(invoiceNumber)]
compensationDT
ActualComp 				<- ErpTransaction[settlementAmountDeducted > 0, .(settlementAmountDeducted, invoiceNumber,  transactionId)]
compensationDT
ActualComp
compensationDT 			<- merge(compensationDT, ActualComp, by = 'invoiceNumber', all.x = TRUE)
compensationDT
compensationDT[!is.na(settlementAmountDeducted)]
ActualComp[, .(settlementAmountDeducted = SUM(settlementAmountDeducted)), by = .(invoiceNumber)]
ActualComp1 				<- ActualComp[, .(settlementAmountDeducted = SUM(settlementAmountDeducted)), by = .(invoiceNumber)]
compensationDT 			<- merge(compensationDT, ActualComp1, by = 'invoiceNumber', all.x = TRUE)
compensationDT
compensationDT			<-  ErpPaymentHistory[grepl('c|e|p', type), .(compensation = SUM(amount), compensationDate = paymentDate[.N]), by = .(invoiceNumber)]
compensationDT 			<- merge(compensationDT, ActualComp1, by = 'invoiceNumber', all.x = TRUE)
compensationDT
compensationDT[!is.na(settlementAmountDeducted)]
compensationDT[!is.na(settlementAmountDeducted) & compensationDate > '2016-04-01']
ErpTransaction[invoiceNumber == '14378100115']
SettlementDeduction[]
SettlementDeduction[transactionId=='4ebec2bf-4f73-4db2-9ad8-7430cb797b50']
ErpInvoice[invoiceNumber == '14378100115']
compensationDT[invoiceNumber == '14378100115']
compensationDT[invoiceNumber == '10403106566']
compensationDT[!is.na(settlementAmountDeducted) & compensationDate > '2016-04-01']
idx = compensationDT[!is.na(settlementAmountDeducted) & compensationDate > '2016-04-01', invoiceNumber]
setkey(ErpInvoice, invoiceNumber)
ErpInvoice[J(idx)]
ErpInvoice[J(idx), ][operatorId == 'nordiskaspel']
compensationDT[invoiceNumber == '10405103763']
ErpInvoice[invoiceNumber == '14378100115']
ErpInvoice[J(idx)]
ErpInvoice[J(idx)][operatorId == 'nordiskaspel']
compensationDT[invoiceNumber == '10031103774']
ErpTransaction[invoiceNumber == '10031103774']
ErpInvoice[invoiceNumber == '10031103774']
SettlementDeduction[transactionId == '28086d07-4b04-48f6-8b92-87e983cedfb9']
ErpInvoice[J(idx)][operatorId == 'nordiskaspel']
ErpInvoice[J(idx)][operatorId == 'nordiskaspel' & is.na(collectionDate)]
ErpInvoice[invoiceNumber == '10405103670']
ErpTransaction[invoiceNumber == '10405103670']
SettlementDeduction[transactionId == '3384b2cb-6a5c-4c43-b468-83828bb2e40c']
# This script is used for all sort of task that aren't to be for #
# reporting purposes, just for solvning different task#
###########################################################################################
options(scipen = 999)#
options("openxlsx.dateFormat" = "yyyy-mm-dd")#
# Function used for setting the path so that files can be loaded#
#
CreditLoss		<- function(x)#
{#
	x1				<- copy(x)#
	Step1			<- x1[eval(Cond), .(	CreditLoss = SUM(invoiceOriginalAmount) - SUM(invoiceFee) - SUM(TransactionFee)), by = .(Rates)]#
	Total			<- x1[!status %like% '(UNNECESSARY|CLOSED)' ,.(Total = SUM(invoiceOriginalAmount) - SUM(invoiceFee) - SUM(TransactionFee)), by = .(Rates)]#
	Step2			<- merge(Total, Step1, by = 'Rates', all = TRUE)#
	Total			<- data.table(Date = z1, Step2)		#
	Total1			<- data.table(Date = z1, Total[, .(Total = SUM(Rates*Total), CreditLoss = SUM(Rates*CreditLoss), Kvot = SUM(Rates*CreditLoss)/SUM(Rates*Total))])#
	return(Total1)#
}#
"pathSet"			<- function( x )#
{#
	if( is( x, "character"))#
	{#
		cmd				<- paste0("echo ", x)#
		cmd1			<-  pipe( cmd , open = "r")#
		path			<-   scan(cmd1, what = "character")  #
		close(cmd1)#
		return(path)#
	} else {#
	 	stop("Input is ", class( x ), " and not valid in")#
	}	#
}#
FULLPATH		<- pathSet( x = "$PWD" )#
.HOME			<- dirname(FULLPATH)#
CurrentDir		<- "invoice"#
#
library(ggfortify) #
# All R-files #
RFiles 					<- list.files(path = .HOME, include.dirs = TRUE, pattern = "*.R$", #
											recursive = TRUE, full.names = TRUE)#
# Load common functions and files #
.HOME#
source(file =  grep(".*/RClass/commonFunction.R", RFiles ,value = TRUE) )#
#
DataFile		<- grep(".*RClass.*datahandle", RFiles, value = TRUE , ignore.case = TRUE)#
#
## Load data into this envirment, path and everything is set by this file#
if( length(DataFile) == 1 )#
{#
	source( file = DataFile, echo = TRUE)#
}#
## Set path and load pkgs, set path one level up#
Pack		<- new("startUps", pkgs = Packages, Input = c("GRAF", "DATA", 'VinstUtBET'), #
				 path = .HOME )#
#
#Pack$instant_pkgs()#
negStyle	<- createStyle(fontColour = '#9C0006', bgFill = "#FFC6CE")#
posStyle	<- createStyle(fontColour = '#006100', bgFill = "#C6EFCE")	#
Pack$setDirs( )
Payments
Payments[TransaktionAmount == '308.45']
ErpTransaction[invoiceNumber = '10048108452']
ErpTransaction[invoiceNumber == '10048108452']
ErpTransaction[invoiceNumber == 'invoiceNumber']
ErpTransaction[invoiceNumber == '10018117120']
227313.06 + 318.39*0.95 + 2993.28*9.2
552999.25 + 2058.57*0.95 + 2185.97*9.2
567336.90 + 3563.62*0.95 + 2076.18*9.2
list.files(path = DATA, pattern = 'reservation', full.names = TRUE)
File			<- list.files(path = DATA, pattern = 'reservation', full.names = TRUE)
read.xlsx(File)
dataSet			<- read.xlsx(File)
setDT(dataSet)
ErpInvocie[debtReference == '100045']
ErpInvoice[debtReference == '100045']
ErpInvoice[invoiceNumber == '100045']
dataSet
ErpInvoice[invoiceNumber == '12425100303']
ErpInvoice[debtReference == '177072']
ErpInvoice[personId == '22126']
ErpInvoice[invoiceNumber == '12426100156']
ErpTransaction[invoiceNumber == '12426100156']
ErpPaymentHistory
ErpPaymentHistory[grepl("2016-09", paymentDate)]
ErpPaymentHistory 		<- merge(ErpPaymentHistory, ErpInvoice, by = 'invoiceNumber', all.x = TRUE)
ErpPaymentHistory
ErpPaymentHistory[grepl("2016-09", paymentDate), SUM(amount), by = .(currency)]
1087789.80 + 16438.29*9.2
217643 + 524.39*0.95 + 2794.28*9.2
548439 + 3086.85*0.95 + 1652.83*9.2
ErpInvoice[grepl("smoke", siteId)]
ErpInvoice[invoiceNumber == '10002112337']
234399 + 524.39*0.95 + 3085.63*9.2
2882640 + 17972.4*0.95 + 26048.7*9.2
567160 + 3563.62*0.95 + 2076.18*9.2
158621 + 1042.25*9.2+1567.1*0.95
785003 + 1863.78*9.2+ActualRev*0.95
785003 + 1863.78*9.2+4043.25*0.95
###########################################################################################
# This script is used for all sort of task that aren't to be for #
# reporting purposes, just for solvning different task#
###########################################################################################
options(scipen = 999)#
options("openxlsx.dateFormat" = "yyyy-mm-dd")#
# Function used for setting the path so that files can be loaded#
#
CreditLoss		<- function(x)#
{#
	x1				<- copy(x)#
	Step1			<- x1[eval(Cond), .(	CreditLoss = SUM(invoiceOriginalAmount) - SUM(invoiceFee) - SUM(TransactionFee)), by = .(Rates)]#
	Total			<- x1[!status %like% '(UNNECESSARY|CLOSED)' ,.(Total = SUM(invoiceOriginalAmount) - SUM(invoiceFee) - SUM(TransactionFee)), by = .(Rates)]#
	Step2			<- merge(Total, Step1, by = 'Rates', all = TRUE)#
	Total			<- data.table(Date = z1, Step2)		#
	Total1			<- data.table(Date = z1, Total[, .(Total = SUM(Rates*Total), CreditLoss = SUM(Rates*CreditLoss), Kvot = SUM(Rates*CreditLoss)/SUM(Rates*Total))])#
	return(Total1)#
}#
"pathSet"			<- function( x )#
{#
	if( is( x, "character"))#
	{#
		cmd				<- paste0("echo ", x)#
		cmd1			<-  pipe( cmd , open = "r")#
		path			<-   scan(cmd1, what = "character")  #
		close(cmd1)#
		return(path)#
	} else {#
	 	stop("Input is ", class( x ), " and not valid in")#
	}	#
}#
FULLPATH		<- pathSet( x = "$PWD" )#
.HOME			<- dirname(FULLPATH)#
CurrentDir		<- "invoice"#
#
library(ggfortify) #
# All R-files #
RFiles 					<- list.files(path = .HOME, include.dirs = TRUE, pattern = "*.R$", #
											recursive = TRUE, full.names = TRUE)#
# Load common functions and files #
.HOME#
source(file =  grep(".*/RClass/commonFunction.R", RFiles ,value = TRUE) )#
#
DataFile		<- grep(".*RClass.*datahandle", RFiles, value = TRUE , ignore.case = TRUE)#
#
## Load data into this envirment, path and everything is set by this file#
if( length(DataFile) == 1 )#
{#
	source( file = DataFile, echo = TRUE)#
}#
## Set path and load pkgs, set path one level up#
Pack		<- new("startUps", pkgs = Packages, Input = c("GRAF", "DATA", 'VinstUtBET'), #
				 path = .HOME )#
#
#Pack$instant_pkgs()#
negStyle	<- createStyle(fontColour = '#9C0006', bgFill = "#FFC6CE")#
posStyle	<- createStyle(fontColour = '#006100', bgFill = "#C6EFCE")	#
Pack$setDirs( )
ErpInvoice
ErpInvoice[ ]
ErpInvoice[is.na(closureDate) & status == 'PAID']
Query		<- " SELECT#
            ei.invoiceNumber,#
            ei.status,#
            ma.siteId,#
            ma.operatorId,#
            ma.type,#
            eph.currency,#
            SUM(IF(eph.type IN('r','m') , eph.amount, 0)) ,#
            SUM(IF(eph.type IN('c','e', 'p'), eph.amount, 0)) ,#
            ei.invoiceFee + ei.reminderFee + IFNULL(ei.originalSettlementFee,0) + ei.interest AS Revenue,#
            ei.closureDate ,#
            IF(eph.type IN('r','m'), eph.paymentDate, NULL) AS paymentDate  #
        FROM ErpInvoice ei#
        INNER JOIN MerchantAid ma ON (CONCAT(ei.merchantId, '.', LOWER(ei.country)) = ma.siteId )#
        INNER JOIN ErpPaymentHistory eph ON( eph.invoiceNumber = ei.invoiceNumber)#
        WHERE DATE(eph.paymentDate) BETWEEN @fromDate AND @toDate#
        GROUP BY eph.invoiceNumber, ma.operatorId , ma.siteId,ma.type,eph.currency"
Data	<- getData(Query)
Query		<- " SELECT#
            ei.invoiceNumber,#
            ei.status,#
            ma.siteId,#
            ma.operatorId,#
            ma.type,#
            eph.currency,#
            SUM(IF(eph.type IN('r','m') , eph.amount, 0)) ,#
            SUM(IF(eph.type IN('c','e', 'p'), eph.amount, 0)) ,#
            ei.invoiceFee + ei.reminderFee + IFNULL(ei.originalSettlementFee,0) + ei.interest AS Revenue,#
            ei.closureDate ,#
            IF(eph.type IN('r','m'), eph.paymentDate, NULL) AS paymentDate  #
        FROM ErpInvoice ei#
        INNER JOIN MerchantAid ma ON (CONCAT(ei.merchantId, '.', LOWER(ei.country)) = ma.siteId )#
        INNER JOIN ErpPaymentHistory eph ON( eph.invoiceNumber = ei.invoiceNumber)#
        WHERE DATE(eph.paymentDate) BETWEEN '2015-01-01' AND CURDATE()#
        GROUP BY eph.invoiceNumber, ma.operatorId , ma.siteId,ma.type,eph.currency"#
Data	<- getData(Query)
Query		<- " SELECT ei.invoiceNumber,#
            ei.status,#
            ma.siteId,#
            ma.operatorId,#
            ma.type,#
            eph.currency,#
            SUM(IF(eph.type IN('r','m') , eph.amount, 0)) ,#
            SUM(IF(eph.type IN('c','e', 'p'), eph.amount, 0)) ,#
            ei.invoiceFee + ei.reminderFee + IFNULL(ei.originalSettlementFee,0) + ei.interest AS Revenue,#
            ei.closureDate ,#
            IF(eph.type IN('r','m'), eph.paymentDate, NULL) AS paymentDate  #
        FROM ErpInvoice ei#
        INNER JOIN MerchantAid ma ON (CONCAT(ei.merchantId, '.', LOWER(ei.country)) = ma.siteId )#
        INNER JOIN ErpPaymentHistory eph ON( eph.invoiceNumber = ei.invoiceNumber)#
        WHERE DATE(eph.paymentDate) BETWEEN '2015-01-01' AND CURDATE()#
        GROUP BY eph.invoiceNumber, ma.operatorId , ma.siteId,ma.type,eph.currency"#
Data	<- getData(Query)
Query		<- " SELECT ei.invoiceNumber,#
            ei.status,#
            ma.siteId,#
            ma.operatorId,#
            ma.type,#
            eph.currency,#
            SUM(IF(eph.type IN('r','m') , eph.amount, 0)) ,#
            SUM(IF(eph.type IN('c','e', 'p'), eph.amount, 0)) ,#
            ei.invoiceFee + ei.reminderFee + IFNULL(ei.originalSettlementFee,0) + ei.interest AS Revenue,#
            ei.closureDate #
        FROM ErpInvoice ei#
        INNER JOIN MerchantAid ma ON (CONCAT(ei.merchantId, '.', LOWER(ei.country)) = ma.siteId )#
        INNER JOIN ErpPaymentHistory eph ON( eph.invoiceNumber = ei.invoiceNumber)#
        WHERE DATE(eph.paymentDate) BETWEEN '2015-01-01' AND CURDATE()#
        GROUP BY eph.invoiceNumber, ma.operatorId , ma.siteId,ma.type,eph.currency"#
Data	<- getData(Query)
Query		<- " SELECT ei.invoiceNumber FROM ErpInvoice ei#
        INNER JOIN MerchantAid ma ON (CONCAT(ei.merchantId, '.', LOWER(ei.country)) = ma.siteId )#
        INNER JOIN ErpPaymentHistory eph ON( eph.invoiceNumber = ei.invoiceNumber)#
        WHERE DATE(eph.paymentDate) BETWEEN '2015-01-01' AND CURDATE()#
        GROUP BY eph.invoiceNumber, ma.operatorId , ma.siteId,ma.type,eph.currency"#
Data	<- getData(Query)
ErpPaymentHistory[invoiceNumber == '10002112047']
ErpPaymentHistory[invoiceNumber == '10268128254']
ErpTransaction[invoiceNumber == '10268128254']
ErpTransaction[operatorId == 'nordiskaspel', ]
ErpTransaction[operatorId == 'nordiskaspel' & settlementPaidAt == '2016-09-15', ]
ErpTransaction[operatorId == 'nordiskaspel' & settlementPaidAt == '2016-09-15', SUM(settlementAmount)  ]
ErpTransaction[operatorId == 'nordiskaspel' & settlementPaidAt == '2016-09-15', .(  SUM(settlementAmount), SUM(settlementAmountDeducted)  ]
ErpTransaction[operatorId == 'nordiskaspel' & settlementPaidAt == '2016-09-15', .(  SUM(settlementAmount), SUM(settlementAmountDeducted)  )]
627644.7 - 14066.86
ErpPaymentHistory[, ]
ErpPaymentHistory[paymentDate >='2016-01-01', .N , by = .(invoiceNumber)][N > 1]
ErpPaymentHistory[invoiceNumber == '10002104840']
ErpPaymentHistory[invoiceNumber == '10002104148']
ErpPaymentHistory[paymentDate >='2016-01-01' & grepl("c|r", type), .N , by = .(invoiceNumber ,type)][N > 1]
ErpPaymentHistory[invoiceNumber == '14378100075']
ErpTransaction[invoiceNumber == 'ErpPaymentHistory']
ErpTransaction[invoiceNumber == '14378100075']
ErpPaymentHistory[invoiceNumber == '10002111760']
ErpInvoice
ErpInvoice[ , .( invoiceFee = SUM(invoiceFee), reminderFee = SUM(reminderFee)), by = .( format(Payment_date, "%Y-%m"))]
ErpInvoice[ , .( invoiceFee = SUM(invoiceFee), reminderFee = SUM(reminderFee)), by = .( Payment = format(Payment_date, "%Y-%m"))]
ErpInvoice[grepl("PAID", status), .( invoiceFee = SUM(invoiceFee), reminderFee = SUM(reminderFee)), by = .( Payment = format(Payment_date, "%Y-%m"))]
ErpInvoice[grepl("PAID", status), .( invoiceFee = SUM(invoiceFee), reminderFee = SUM(reminderFee)), by = .( PaidDate = format(Payment_date, "%Y-%m"))][order(PaidDate)]
ErpInvoice[grepl("PAID", status) & is.na(Payment_date)]
ErpInvoice[grepl("PAID", status), .( invoiceFee = SUM(invoiceFee), reminderFee = SUM(reminderFee)), by = .( PaidDate = format(moneyDate, "%Y-%m"))][order(PaidDate)]
ErpInvoice[grepl("PAID", status) & is.na(ErpInvoice[grepl("PAID", status), )]
ErpInvoice[grepl("PAID", status) & is.na(moneyDate )]
ErpInvoice[grepl("PAID", status) & is.na(moneyDate ), .N, by = .(Bill_month )]
ErpInvoice[grepl("PAID", status) & is.na(moneyDate ) & grepl("2016-Feb", Bill_month)]
222958.09 + 731.03*0.95 + 3139.16*9.2
222958.09 + 731.03*0.95 + 3139.16*9.2 + 6663.55 + 195.62*0.95 + 126.89*9.2
236303.56 + 607.94*0.95 + 3396.23*9.2 + 6663.55 + 195.62*0.95 + 126.89*9.2
579146.90 + 3471.35*0.95 + 2525.68*9.2
###########################################################################################
# In this file the data manipulation will be handled, data will be sent#
# to #
###########################################################################################
options(scipen = 999)#
library(openxlsx)#
"pathSet"			<- function( x )#
{#
	if( is( x, "character"))#
	{#
		cmd				<- paste0("echo ", x)#
		cmd1			<-  pipe( cmd , open = "r")#
		path			<-   scan(cmd1, what = "character")  #
		close(cmd1)#
		return(path)#
	} else {#
	 	stop("Input is ", class( x ), " and not valid in")#
	}	#
}#
settlmentRules 	<- list( 	'cl' = 'cancelled',#
							'da' = 'AfterSettlementPeriod',#
							'dp' = 'AfterSettlementPeriodWhenPaid',#
							'ia'	= 'Immediately' ,#
							'ip' = 'ImmediatelyWhenPaid'#
	)#
#
FULLPATH		<- pathSet( x = "$PWD" )#
.HOME		<- dirname(FULLPATH)#
# Set the home diretory #
# All R-files #
RFiles 					<- list.files(path = .HOME, include.dirs = TRUE, pattern = "*.R$", #
											recursive = TRUE, full.names = TRUE)#
# Load common functions and files , DATA dir is where to send all data#
source(file = grep(".*RClass.*(?<=tion.R)", RFiles ,value = TRUE, perl = TRUE, ignore.case = TRUE) )#
hs1		<- createStyle(fgFill = "#DCE6F1", halign = "center", textDecoration = "Italic", border = "Bottom")#
#
hs2	<- createStyle(	#
		fgFill = "black", #
		fontSize = 12,#
		halign = "center", #
		textDecoration = "bold", #
			border = "Bottom")#
#
setValue 	<- function(name, colum, data, startRow = 2)#
{#
	addWorksheet( wb, name)#
	setColWidths(wb, sheet = name, cols = colum, widths = 22)#
	writeData(wb, sheet = name, data, startRow = startRow, headerStyle = hs1)#
}#
#
#system(Code)#
#
# Pkgs needed #
Packages			 	<- c("lubridate", 'data.table','reshape2', 'reshape',#
							'ggthemes', 'stargazer', 'RColorBrewer',#
							'extrafont', 'quantmod','openxlsx',#
							'ggplot2', 'scales', 'grid', 'gridExtra',"Hmisc",#
							 'dynlm', 'dplyr', 'RMySQL')#
## Set path and load pkgs#
Pack		<- new("startUps", pkgs = Packages, path = dirname(FULLPATH) )#
Pack$instant_pkgs()#
## Get the lastest rates from ExchangeRate #
Query 	<- sprintf("SELECT * FROM ExchangeRate WHERE #
				date = ( SELECT max(date) FROM ExchangeRate)")#
#
Rates 	<- getData(query = Query)#
## Change to swedish currency #
Rates[, Rates := Rates[currency == 'SEK', rate]/rate]#
Rates		<- Rates[,.(Currency = currency, Rates)]
Rates
query					<- "SELECT mm.*, #
									ss.type AS TYPE, #
									ss.operatorId,#
									mcs.invoiceHoldPeriodRecurring,#
									mcs.invoicableStatuses FROM MeacodeMerchant mm #
						INNER JOIN Site ss ON (mm.merchantId = ss.siteId)#
						INNER JOIN MerchantCountrySettings mcs ON (mm.merchantId = mcs.merchantId AND #
																	mm.country = mcs.country)"#
#
Meacode					<- getData(query = query)#
setnames(Meacode, c('invoiceFee', 'reminderFee'), c('CondinvoiceFee', 'CondreminderFee'))#
Meacode[, TYPE := ifelse(grepl("RISK", TYPE), 'NoRisk', #
							ifelse(grepl("NORMAL", TYPE), "Risk", TYPE) )]#
Meacode[grepl("Risk", TYPE), Risk := 1]			#
Meacode[grepl("NoRisk", TYPE), Risk := 0]
Meacode[grepl("store" , storeId), operatorId := 'Store']#
Meacode[, c('createdAt','expiresAt','invoiceCurrency') := NULL]#
Company	<- list( 'UK' = c(	"comeon","bertil", "vinnarum", #
							"casinoroom","redkings","svenskalottoportalen",#
							"3hholdings","garantispelet","videoslots",#
							"europaspelet","garantispelet","supervinsten",#
							"superspelet") )#
#################################################################################### 			#
# MySQL cmds #
# dbListTables(con) = list all tables in above connection#
# dbListFields(con, DBtable) = list of all columns in table#
####################################################################################	#
## This is by each transaction#
StartDate		<- "2013-05-14"#
CurrentDate		<- Sys.Date( )#
Query	<- sprintf("SELECT CONCAT(tr.merchantId, '.', LOWER(tr.country)) AS siteId ,#
							tr.invoiceCurrency AS Currency,#
							tr.ocrNumber, #
							tr.playerId,#
							tr.status,#
							tr.toAccount,#
							et.* FROM ErpTransaction et #
						INNER JOIN ErpInvoice tr on (tr.invoiceNumber = et.invoiceNumber)",#
					 	StartDate);#
#
Step1 		<- getData(query = Query )
Step1		<- Step1[!siteId %like% "(kriita|3h)"]#
for( i in 1:length(settlmentRules))#
{#
	first_		<- settlmentRules[i]#
	Step1[grepl(names(first_), settlementRule), settlementRuleString :=  first_]#
}#
#
Step1		<- merge(Step1, Rates, by.x = "currency", by.y = 'Currency', all = TRUE)#
Step1 		<- Step1[!is.na(siteId)]#
#
tmpMea		<- unique(Meacode[, .(storeId , TYPE , operatorId, country, settlementInterval, #
								settlementPeriod, transactionFeePercentage)], by = 'storeId')#
#
Step1		<- merge(Step1, tmpMea, by.x = "siteId", by.y = 'storeId', all.x = TRUE )#
rm(tmpMea)#
#
ErpTransaction		<- copy(Step1)#
ErpTransaction 		<- ErpTransaction[!is.na(invoiceNumber)]#
rm(Step1)#
######## Merge with SettlementDeduction#
query 							<- 'select * from SettlementDeduction'#
SettlementDeduction				<- getData(query = query)#
setnames(SettlementDeduction, 'amount', 'DeductedAmount')#
SettlementDeduction[, tmpVal := paste0(DeductedAmount, " (",  paidAt,")")]#
SettlementDeduction[order(paidAt), Count := 1:.N, by = .(transactionId)]
Step2				<- dcast.data.table(SettlementDeduction[order(paidAt)] , transactionId ~ Count, value.var = 'tmpVal')#
#
Names				<- colnames(Step2)#
#
Names1				<- paste0("DeductionNr_", setdiff(Names, "transactionId"))#
setnames(Step2, 2:NCOL(Step2), Names1)#
#
ErpTransaction 		<- merge(ErpTransaction, Step2, by = 'transactionId', all.x = TRUE)#
SettlementDeduction[, tmpVal := NULL]#
#
rm(Step2)#
ErpTransaction 					<- ErpTransaction[!is.na(transactionId)]#
rm( query); gc(reset = TRUE)#
## Get each transaction, mulitple invoiceNr#
Query			<- sprintf("SELECT * FROM ErpPaymentHistory where paymentDate >= '%s'", StartDate)#
Step1 			<- getData(query = Query )#
Step1[, paymentDate := as.Date(paymentDate)]#
ErpPaymentHistory 	<- copy(Step1)
rm(Step1)
ErpPaymentHistory
## ErpInvoice with Invoice #
Query 	<- sprintf("SELECT 	ei.*,#
							iv.state,#
							IF( ei.playingCurrency = 'EUR' #
									AND ei.invoiceCurrency = 'SEK', #
										ei.originalSettlementFee*ei.conversionRate, #
											ei.originalSettlementFee) AS TransactionFee#
							FROM ErpInvoice ei #
						INNER JOIN Invoice iv ON (ei.invoiceNumber = iv.invoiceNumber)#
						WHERE createdAt >= '%s'",  StartDate)			#
Step1 				<- getData(query = Query )#
Step1[, siteId := paste0(merchantId, '.', tolower(country))]#
Step1		<- Step1[!siteId %like% "(kriita|3h)"]
Step1
Step1[, ':=' ( Bill_date 			= as.Date(createdAt),#
				dueDate 			= as.Date(dueDate),#
				Payment_date		= as.Date(closureDate),#
				firstReminderDate 	= as.Date(firstReminderDate),#
				collectionDate		= as.Date(collectionDate)#
			 )]#
Step1[is.na(TransactionFee), TransactionFee := settlementFee]#
Step1[, ':=' ( #
			Bill_month		= format(Bill_date, "%Y-%b"),#
			Payment_month	= format(Payment_date, "%Y-%b")#
)]#
#
Step1			<- merge(Step1, Rates, by.x = 'invoiceCurrency', by.y = "Currency", all = TRUE)#
#
Meacode1		<- Meacode[, -c('invoiceCustomerSupport','senderEmail','storeContact','storeLogo','brand','storeStreet', 'storeWww','transactionDateFormat'), with = FALSE]#
ErpInvoice				<- merge(Step1, Meacode1, by.x = c('merchantId',"siteId","country"), by.y = c('merchantId','storeId',"country"), all.x = TRUE)					#
ErpInvoice 				<- ErpInvoice[!is.na(personId)]
## Estimate the realmoney and get the last date #
moneyDT					<-   ErpPaymentHistory[grepl('(m|r)',type) , .(money = SUM(amount), moneyDate =  paymentDate[.N]), by = .(invoiceNumber)]#
#
ErpInvoice 				<- merge(ErpInvoice, moneyDT, by = 'invoiceNumber', all.x = TRUE)#
ErpInvoice[is.na(money), money := 0]#
rm(moneyDT)#
compensationDT			<-  ErpPaymentHistory[grepl('c|e|p', type), .(compensation = SUM(amount), compensationDate = paymentDate[.N]), by = .(invoiceNumber)]#
ErpInvoice 				<- merge(ErpInvoice, compensationDT, by = 'invoiceNumber', all.x = TRUE)#
ErpInvoice[is.na(compensation), compensation := 0]#
ErpInvoice 		<- ErpInvoice[!personId %like% '\\b(311|1115|70594)\\b', ]#
rm(compensationDT)#
ErpPaymentHistory 		<- merge(ErpPaymentHistory, #
									ErpInvoice[,.(invoiceNumber, TYPE , operatorId, siteId, merchantId, country)],#
								 by = 'invoiceNumber', all.x = TRUE)#
#
ErpPaymentHistory		<- ErpPaymentHistory[!is.na(siteId)]#
PaymentRule		<- list(	'c' = 'compensation',#
							'r' = 'reference',#
							'm' = 'manual payment',#
							'e' = 'creditor compensation',#
							'p' = 'past payment'#
)#
DeductionRule	<- list( 	'co' = 'COMPENSATION',#
							'pc' = 'PAPER_INVOICE_CHARGE',#
							'ci' = 'COMPENSATION_INTEREST',#
							'cr' = 'COMPENSATION_REMINDER',#
							'cf' = 'INVOICING_CHARGE',#
							'cl' = 'CANCELLATION',#
							'ma' = 'MANUAL_DEDUCTION',#
							'fb' = 'fallbackDeliveryCharge')#
setkey(ErpInvoice, personId)#
ErpInvoice[, InvoiceNr := .N, by = .(personId)]#
ErpInvoice[, tmp := 1L]#
## Add up each by unique customer, based on personId#
ErpInvoice[order(Bill_date), Count:= cumsum(tmp), by = .(personId)]#
## Divided each of the revenues#
ErpInvoice[, ':=' ( Revenue  = invoiceFee + TransactionFee + reminderFee + interest ) ]#
Regex		<- paste0(Company$UK, collapse = "|")#
ErpInvoice[siteId %like% Regex, Company := "UK"]	#
ErpInvoice[is.na(Company), Company := 'AB']	#
#
ErpTransaction		<- merge(ErpTransaction, ErpInvoice[, .(invoiceNumber, playerId, #
															Erp_createdAt = createdAt,#
															Company,	Risk)], by = c('invoiceNumber', 'playerId'),#
												all.x = TRUE)#
BankAccount		<- list('780764498' = c(Typ = 'KlientMedel', land = 'UK', Valuta = 'SEK'),#
						'50509489'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'EUR'),#
						'50179489'	= c(Typ = 'KlientMedel', land = 'UK', Valuta = 'EUR'),#
						'50756869'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'NOK'),#
						'722424248' = c(Typ = 'Transaktion', land = 'SE', Valuta = 'SEK'),#
						'50757059'	= c(Typ = 'KlientMedel', land = 'UK', Valuta = 'NOK'),#
						'840009658'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'SEK'),#
						'90461249298'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'NOK'),#
						'8901112224'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'DKK'),#
						'31311001520968' = c(Typ = 'KlientMedel', land = 'FI', Valuta = 'EUR'),#
						'903816288'		= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'SEK'),#
						'875604218'		= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'SEK'),#
						'790636298'		= c(Typ = 'Transaktion', land = 'SE', Valuta = 'SEK')#
						)	#
Account			<- list(	'166-0232' 					= c(konto = "722424248", valuta = 'SEK', typ = 'Transaktion'),#
							'514-5420' 					= c(konto = "780764498", valuta = 'SEK', typ = 'Klientmedel'),#
							'576-8353' 					= c(konto = "840009658", valuta = 'SEK', typ = 'Klientmedel'),#
							'DE07514206000013482005'	= c(konto = "13482005", valuta = 'DE', typ = 'Transaktion'),#
							'FI1131311001520968'		= c(konto = "31311001520968", valuta = 'EUR', typ = 'Transaktion'),#
							'NO5190461249298'			= c(konto = "90461249298", valuta = 'NOK', typ = 'Transaktion'),#
							'SE2860000000000050509489' 	= c(konto = "50509489", valuta = 'EUR', typ = 'Klientmedel'),#
							'SE9160000000000050756869'  = c(konto = "50756869", valuta = 'NOK', typ = 'Klientmedel'),#
							'SE9360000000000050179489'	= c(konto = "50179489", valuta = 'EUR', typ = 'Klientmedel')#
)#
TransType 		<- list('NMSC' = 'Miscellaneous',#
						'NTRF' = 'Transfers (I/O local payments)',#
						'NCRO' = 'Cross-border (I/O payments)',#
						'NLOC' = 'Local payment (I/O)',#
						'NCHG' = 'Transaction type')						#
#
Query		<- sprintf("SELECT * FROM kriita_survey.Payment");#
#
Payments	<- getData(query = Query)#
for( i in 1:length(TransType))#
{#
	Step1 	<- TransType[i]#
	Payments[grepl(names(Step1), TransaktionRest), Type := Step1]	#
}#
#
for( i in 1:length(BankAccount))#
{#
	Step1 	<- BankAccount[i]#
	Payments[grepl(names(Step1), AccountId), Valuta := Step1[[1]][[3]]]	#
}#
Payments 	<- merge(Payments, Rates, by.x = 'Valuta', by.y = 'Currency', all = TRUE)			#
Payments[is.na(Rates) , Rates := 1]#
Query		<- sprintf("SELECT * FROM Balance");#
Balance		<- getData(query = Query ,dbname = "kriita_survey")#
Balance[, CloseBalance := as.numeric(gsub("([0-9\\.]+).*", "\\1", CloseBalance))]#
Months 			<- ErpInvoice[, .(	DateRange 	= unique(format(Bill_date, "%Y-%B")),#
								tmpRange 	= unique(format(Bill_date, "%Y-%m")))][order(tmpRange), DateRange]#
MonthsLow 			<- ErpInvoice[, .(	DateRange 	= unique(format(Bill_date, "%Y-%b")),#
							tmpRange 	= unique(format(Bill_date, "%Y-%m")))][order(tmpRange), DateRange]#
Comp	<- list('europaspelet' = c('europaspelet|superspelet|supervinsten|nordiska'),#
				'casinoroom' = c('casinoroom'),#
				'comeon' = c('comeon'),#
				'videoslots' = c('videoslots'),#
				'southbaygroup' = c('southbaygroup|testoplus|superdietten|sbg'),#
				'healthpills' = c('healthpills'),#
				'redkings' = c('redkings'),#
				'novus' = c('novus'),#
				'campus' = c('campus'),#
				'protectme' = c('protectme'),#
				'hem24'		= c('hem24'))#
ErpInvoice[, SiteId := ifelse(grepl("garantispelet.se", siteId), "europaspelet.se", #
							ifelse(grepl("garantispelet2.se", siteId), "europaspelet2.se", siteId ))]#
query		<- "SELECT * FROM Person"#
Person		<- getData(query = query)
ErpInvoice
###########################################################################################
# In this file the data manipulation will be handled, data will be sent#
# to #
###########################################################################################
options(scipen = 999)#
library(openxlsx)#
"pathSet"			<- function( x )#
{#
	if( is( x, "character"))#
	{#
		cmd				<- paste0("echo ", x)#
		cmd1			<-  pipe( cmd , open = "r")#
		path			<-   scan(cmd1, what = "character")  #
		close(cmd1)#
		return(path)#
	} else {#
	 	stop("Input is ", class( x ), " and not valid in")#
	}	#
}#
settlmentRules 	<- list( 	'cl' = 'cancelled',#
							'da' = 'AfterSettlementPeriod',#
							'dp' = 'AfterSettlementPeriodWhenPaid',#
							'ia'	= 'Immediately' ,#
							'ip' = 'ImmediatelyWhenPaid'#
	)#
#
FULLPATH		<- pathSet( x = "$PWD" )#
.HOME		<- dirname(FULLPATH)#
# Set the home diretory #
# All R-files #
RFiles 					<- list.files(path = .HOME, include.dirs = TRUE, pattern = "*.R$", #
											recursive = TRUE, full.names = TRUE)#
# Load common functions and files , DATA dir is where to send all data#
source(file = grep(".*RClass.*(?<=tion.R)", RFiles ,value = TRUE, perl = TRUE, ignore.case = TRUE) )
hs1		<- createStyle(fgFill = "#DCE6F1", halign = "center", textDecoration = "Italic", border = "Bottom")#
#
hs2	<- createStyle(	#
		fgFill = "black", #
		fontSize = 12,#
		halign = "center", #
		textDecoration = "bold", #
			border = "Bottom")#
#
setValue 	<- function(name, colum, data, startRow = 2)#
{#
	addWorksheet( wb, name)#
	setColWidths(wb, sheet = name, cols = colum, widths = 22)#
	writeData(wb, sheet = name, data, startRow = startRow, headerStyle = hs1)#
}#
#
#system(Code)#
#
# Pkgs needed #
Packages			 	<- c("lubridate", 'data.table','reshape2', 'reshape',#
							'ggthemes', 'stargazer', 'RColorBrewer',#
							'extrafont', 'quantmod','openxlsx',#
							'ggplot2', 'scales', 'grid', 'gridExtra',"Hmisc",#
							 'dynlm', 'dplyr', 'RMySQL')#
## Set path and load pkgs#
Pack		<- new("startUps", pkgs = Packages, path = dirname(FULLPATH) )#
Pack$instant_pkgs()#
## Get the lastest rates from ExchangeRate #
Query 	<- sprintf("SELECT * FROM ExchangeRate WHERE #
				date = ( SELECT max(date) FROM ExchangeRate)")#
#
Rates 	<- getData(query = Query)
Rates[, Rates := Rates[currency == 'SEK', rate]/rate]
Rates
Rates		<- Rates[,.(Currency = currency, Rates)]
######################################################################################
# Load in conditions  #
######################################################################################
query					<- "SELECT mm.*, #
									ss.type AS TYPE, #
									ss.operatorId,#
									mcs.invoiceHoldPeriodRecurring,#
									mcs.invoicableStatuses FROM MeacodeMerchant mm #
						INNER JOIN Site ss ON (mm.merchantId = ss.siteId)#
						INNER JOIN MerchantCountrySettings mcs ON (mm.merchantId = mcs.merchantId AND #
																	mm.country = mcs.country)"#
#
Meacode					<- getData(query = query)#
setnames(Meacode, c('invoiceFee', 'reminderFee'), c('CondinvoiceFee', 'CondreminderFee'))
Meacode
###########################################################################################
# In this file the data manipulation will be handled, data will be sent#
# to #
###########################################################################################
options(scipen = 999)#
library(openxlsx)#
"pathSet"			<- function( x )#
{#
	if( is( x, "character"))#
	{#
		cmd				<- paste0("echo ", x)#
		cmd1			<-  pipe( cmd , open = "r")#
		path			<-   scan(cmd1, what = "character")  #
		close(cmd1)#
		return(path)#
	} else {#
	 	stop("Input is ", class( x ), " and not valid in")#
	}	#
}#
settlmentRules 	<- list( 	'cl' = 'cancelled',#
							'da' = 'AfterSettlementPeriod',#
							'dp' = 'AfterSettlementPeriodWhenPaid',#
							'ia'	= 'Immediately' ,#
							'ip' = 'ImmediatelyWhenPaid'#
	)#
#
FULLPATH		<- pathSet( x = "$PWD" )#
.HOME		<- dirname(FULLPATH)#
# Set the home diretory #
# All R-files #
RFiles 					<- list.files(path = .HOME, include.dirs = TRUE, pattern = "*.R$", #
											recursive = TRUE, full.names = TRUE)#
# Load common functions and files , DATA dir is where to send all data#
source(file = grep(".*RClass.*(?<=tion.R)", RFiles ,value = TRUE, perl = TRUE, ignore.case = TRUE) )#
hs1		<- createStyle(fgFill = "#DCE6F1", halign = "center", textDecoration = "Italic", border = "Bottom")#
#
hs2	<- createStyle(	#
		fgFill = "black", #
		fontSize = 12,#
		halign = "center", #
		textDecoration = "bold", #
			border = "Bottom")#
#
setValue 	<- function(name, colum, data, startRow = 2)#
{#
	addWorksheet( wb, name)#
	setColWidths(wb, sheet = name, cols = colum, widths = 22)#
	writeData(wb, sheet = name, data, startRow = startRow, headerStyle = hs1)#
}#
#
#system(Code)#
#
# Pkgs needed #
Packages			 	<- c("lubridate", 'data.table','reshape2', 'reshape',#
							'ggthemes', 'stargazer', 'RColorBrewer',#
							'extrafont', 'quantmod','openxlsx',#
							'ggplot2', 'scales', 'grid', 'gridExtra',"Hmisc",#
							 'dynlm', 'dplyr', 'RMySQL')#
## Set path and load pkgs#
Pack		<- new("startUps", pkgs = Packages, path = dirname(FULLPATH) )#
Pack$instant_pkgs()#
## Get the lastest rates from ExchangeRate #
Query 	<- sprintf("SELECT * FROM ExchangeRate WHERE #
				date = ( SELECT max(date) FROM ExchangeRate)")#
#
Rates 	<- getData(query = Query)#
## Change to swedish currency #
Rates[, Rates := Rates[currency == 'SEK', rate]/rate]#
Rates		<- Rates[,.(Currency = currency, Rates)]#
######################################################################################
# Load in conditions  #
######################################################################################
query					<- "SELECT mm.*, #
									ss.type AS TYPE, #
									ss.operatorId,#
									mcs.invoiceHoldPeriodRecurring,#
									mcs.invoicableStatuses FROM MeacodeMerchant mm #
						INNER JOIN Site ss ON (mm.merchantId = ss.siteId)#
						INNER JOIN MerchantCountrySettings mcs ON (mm.merchantId = mcs.merchantId AND #
																	mm.country = mcs.country)"#
#
Meacode					<- getData(query = query)#
setnames(Meacode, c('invoiceFee', 'reminderFee'), c('CondinvoiceFee', 'CondreminderFee'))
Meacode[, TYPE := ifelse(grepl("RISK", TYPE), 'NoRisk', #
							ifelse(grepl("NORMAL", TYPE), "Risk", TYPE) )]#
Meacode[grepl("Risk", TYPE), Risk := 1]			#
Meacode[grepl("NoRisk", TYPE), Risk := 0]#
#
Meacode[grepl("store" , storeId), operatorId := 'Store']#
Meacode[, c('createdAt','expiresAt','invoiceCurrency') := NULL]#
Company	<- list( 'UK' = c(	"comeon","bertil", "vinnarum", #
							"casinoroom","redkings","svenskalottoportalen",#
							"3hholdings","garantispelet","videoslots",#
							"europaspelet","garantispelet","supervinsten",#
							"superspelet") )#
#################################################################################### 			#
# MySQL cmds #
# dbListTables(con) = list all tables in above connection#
# dbListFields(con, DBtable) = list of all columns in table#
####################################################################################	#
## This is by each transaction#
StartDate		<- "2013-05-14"#
CurrentDate		<- Sys.Date( )
( )#
Query	<- sprintf("SELECT CONCAT(inv.siteId, '.', LOWER(ei.country)) AS siteId ,#
							ei.invoiceCurrency AS Currency,#
							inv.ocrNumber, #
							inv.playerId,#
							ei.clientStatus AS status,#
							tr.toAccount,#
							et.* FROM ErpTransaction et #
						INNER JOIN ErpInvoice ei ON (tr.invoiceNumber = et.invoiceNumber)#
						INNER JOIN Invoice inv ON(inv.invoiceNumber = et.invoiceNumber)",#
					 	StartDate);#
#
Step1 		<- getData(query = Query )
Query	<- sprintf("SELECT CONCAT(inv.siteId, '.', LOWER(ei.country)) AS siteId ,#
							ei.invoiceCurrency AS Currency,#
							inv.ocrNumber, #
							inv.playerId,#
							ei.clientStatus AS status,#
							inv.toAccount,#
							et.* FROM ErpTransaction et #
						INNER JOIN ErpInvoice ei ON (tr.invoiceNumber = et.invoiceNumber)#
						INNER JOIN Invoice inv ON(inv.invoiceNumber = et.invoiceNumber)",#
					 	StartDate);#
#
Step1 		<- getData(query = Query )
Query	<- sprintf("SELECT CONCAT(inv.siteId, '.', LOWER(ei.country)) AS siteId ,#
							ei.invoiceCurrency AS Currency,#
							inv.ocrNumber, #
							inv.playerId,#
							ei.clientStatus AS status,#
							inv.toAccount,#
							et.* FROM ErpTransaction et #
						INNER JOIN ErpInvoice ei ON (ei.invoiceNumber = et.invoiceNumber)#
						INNER JOIN Invoice inv ON(inv.invoiceNumber = et.invoiceNumber)",#
					 	StartDate);#
#
Step1 		<- getData(query = Query )
Step1
Step1[, .N, by = .(transactionId)][N >1]
Step1[, .N, by = .(transactionId, siteId)][N >1]
Step1[transactionId == '12ea161b-a801-4be8-82ed-ba9e86645ffd']
Step1		<- Step1[!siteId %like% "(kriita|3h)"]#
for( i in 1:length(settlmentRules))#
{#
	first_		<- settlmentRules[i]#
	Step1[grepl(names(first_), settlementRule), settlementRuleString :=  first_]#
}#
#
Step1		<- merge(Step1, Rates, by.x = "currency", by.y = 'Currency', all = TRUE)#
Step1 		<- Step1[!is.na(siteId)]#
#
tmpMea		<- unique(Meacode[, .(storeId , TYPE , operatorId, country, settlementInterval, #
								settlementPeriod, transactionFeePercentage)], by = 'storeId')#
#
Step1		<- merge(Step1, tmpMea, by.x = "siteId", by.y = 'storeId', all.x = TRUE )#
rm(tmpMea)#
#
ErpTransaction		<- copy(Step1)#
ErpTransaction 		<- ErpTransaction[!is.na(invoiceNumber)]
rm(Step1)
######## Merge with SettlementDeduction#
query 							<- 'select * from SettlementDeduction'#
SettlementDeduction				<- getData(query = query)#
setnames(SettlementDeduction, 'amount', 'DeductedAmount')#
SettlementDeduction[, tmpVal := paste0(DeductedAmount, " (",  paidAt,")")]#
SettlementDeduction[order(paidAt), Count := 1:.N, by = .(transactionId)]#
#
Step2				<- dcast.data.table(SettlementDeduction[order(paidAt)] , transactionId ~ Count, value.var = 'tmpVal')#
#
Names				<- colnames(Step2)
Names1				<- paste0("DeductionNr_", setdiff(Names, "transactionId"))#
setnames(Step2, 2:NCOL(Step2), Names1)#
#
ErpTransaction 		<- merge(ErpTransaction, Step2, by = 'transactionId', all.x = TRUE)#
SettlementDeduction[, tmpVal := NULL]#
#
rm(Step2)#
ErpTransaction 					<- ErpTransaction[!is.na(transactionId)]#
rm( query); gc(reset = TRUE)#
## Get each transaction, mulitple invoiceNr#
Query			<- sprintf("SELECT * FROM ErpPaymentHistory where paymentDate >= '%s'", StartDate)#
Step1 			<- getData(query = Query )#
Step1[, paymentDate := as.Date(paymentDate)]#
ErpPaymentHistory 	<- copy(Step1)#
rm(Step1)
ErpPaymentHistory
ErpPaymentHistory[type == 'c']
ErpPaymentHistory[invoiceNumber == '14396100002']
Query 	<- sprintf("SELECT 	ei.*,#
							iv.state,#
							IF( ei.playingCurrency = 'EUR' #
									AND ei.invoiceCurrency = 'SEK', #
										ei.originalSettlementFee*ei.conversionRate, #
											ei.originalSettlementFee) AS TransactionFee#
							FROM ErpInvoice ei #
						INNER JOIN Invoice iv ON (ei.invoiceNumber = iv.invoiceNumber)#
						WHERE createdAt >= '%s'",  StartDate)			#
Step1 				<- getData(query = Query )
Step1
## ErpInvoice with Invoice #
Query 	<- sprintf("SELECT 	ei.*,#
							iv.state,#
							iv.siteId,#
							iv.toAccount,#
							iv.personId,#
							iv.playerId,#
							iv.dueDate,#
							iv.ocrNumber,#
							iv.ocrNumberReminder,#
							IF( ei.playingCurrency = 'EUR' #
									AND ei.invoiceCurrency = 'SEK', #
										ei.originalSettlementFee*ei.conversionRate, #
											ei.originalSettlementFee) AS TransactionFee#
							FROM ErpInvoice ei #
						INNER JOIN Invoice iv ON (ei.invoiceNumber = iv.invoiceNumber)#
						WHERE createdAt >= '%s'",  StartDate)			#
Step1 				<- getData(query = Query )#
Step1[, siteId := paste0(merchantId, '.', tolower(country))]#
Step1		<- Step1[!siteId %like% "(kriita|3h)"]
## ErpInvoice with Invoice #
Query 	<- sprintf("SELECT 	ei.*,#
							iv.state,#
							iv.siteId AS merchantId,#
							iv.toAccount,#
							iv.personId,#
							iv.playerId,#
							iv.dueDate,#
							iv.ocrNumber,#
							iv.ocrNumberReminder,#
							IF( ei.playingCurrency = 'EUR' #
									AND ei.invoiceCurrency = 'SEK', #
										ei.originalSettlementFee*ei.conversionRate, #
											ei.originalSettlementFee) AS TransactionFee#
							FROM ErpInvoice ei #
						INNER JOIN Invoice iv ON (ei.invoiceNumber = iv.invoiceNumber)#
						WHERE createdAt >= '%s'",  StartDate)			#
Step1 				<- getData(query = Query )#
Step1[, siteId := paste0(merchantId, '.', tolower(country))]
Step1
Step1		<- Step1[!siteId %like% "(kriita|3h)"]
Step1[, ':=' ( Bill_date 			= as.Date(createdAt),#
				dueDate 			= as.Date(dueDate),#
				Payment_date		= as.Date(closureDate),#
				firstReminderDate 	= as.Date(firstReminderDate),#
				collectionDate		= as.Date(collectionDate)#
			 )]
Step1[is.na(TransactionFee), TransactionFee := settlementFee]#
Step1[, ':=' ( #
			Bill_month		= format(Bill_date, "%Y-%b"),#
			Payment_month	= format(Payment_date, "%Y-%b")#
)]#
#
Step1			<- merge(Step1, Rates, by.x = 'invoiceCurrency', by.y = "Currency", all = TRUE)#
#
Meacode1		<- Meacode[, -c('invoiceCustomerSupport','senderEmail','storeContact','storeLogo','brand','storeStreet', 'storeWww','transactionDateFormat'), with = FALSE]#
ErpInvoice				<- merge(Step1, Meacode1, by.x = c('merchantId',"siteId","country"), by.y = c('merchantId','storeId',"country"), all.x = TRUE)					#
ErpInvoice 				<- ErpInvoice[!is.na(personId)]#
#
## Estimate the realmoney and get the last date #
moneyDT					<-   ErpPaymentHistory[grepl('(m|r)',type) , .(money = SUM(amount), moneyDate =  paymentDate[.N]), by = .(invoiceNumber)]#
#
ErpInvoice 				<- merge(ErpInvoice, moneyDT, by = 'invoiceNumber', all.x = TRUE)#
ErpInvoice[is.na(money), money := 0]#
rm(moneyDT)#
compensationDT			<-  ErpPaymentHistory[grepl('c|e|p', type), .(compensation = SUM(amount), compensationDate = paymentDate[.N]), by = .(invoiceNumber)]#
ErpInvoice 				<- merge(ErpInvoice, compensationDT, by = 'invoiceNumber', all.x = TRUE)#
ErpInvoice[is.na(compensation), compensation := 0]#
ErpInvoice 		<- ErpInvoice[!personId %like% '\\b(311|1115|70594)\\b', ]#
rm(compensationDT)#
ErpPaymentHistory 		<- merge(ErpPaymentHistory, #
									ErpInvoice[,.(invoiceNumber, TYPE , operatorId, siteId, merchantId, country)],#
								 by = 'invoiceNumber', all.x = TRUE)#
#
ErpPaymentHistory		<- ErpPaymentHistory[!is.na(siteId)]#
PaymentRule		<- list(	'c' = 'compensation',#
							'r' = 'reference',#
							'm' = 'manual payment',#
							'e' = 'creditor compensation',#
							'p' = 'past payment'#
)#
DeductionRule	<- list( 	'co' = 'COMPENSATION',#
							'pc' = 'PAPER_INVOICE_CHARGE',#
							'ci' = 'COMPENSATION_INTEREST',#
							'cr' = 'COMPENSATION_REMINDER',#
							'cf' = 'INVOICING_CHARGE',#
							'cl' = 'CANCELLATION',#
							'ma' = 'MANUAL_DEDUCTION',#
							'fb' = 'fallbackDeliveryCharge')#
setkey(ErpInvoice, personId)#
ErpInvoice[, InvoiceNr := .N, by = .(personId)]#
ErpInvoice[, tmp := 1L]#
## Add up each by unique customer, based on personId#
ErpInvoice[order(Bill_date), Count:= cumsum(tmp), by = .(personId)]#
## Divided each of the revenues#
ErpInvoice[, ':=' ( Revenue  = invoiceFee + TransactionFee + reminderFee + interest ) ]#
Regex		<- paste0(Company$UK, collapse = "|")#
ErpInvoice[siteId %like% Regex, Company := "UK"]	#
ErpInvoice[is.na(Company), Company := 'AB']	#
#
ErpTransaction		<- merge(ErpTransaction, ErpInvoice[, .(invoiceNumber, playerId, #
															Erp_createdAt = createdAt,#
															Company,	Risk)], by = c('invoiceNumber', 'playerId'),#
												all.x = TRUE)#
BankAccount		<- list('780764498' = c(Typ = 'KlientMedel', land = 'UK', Valuta = 'SEK'),#
						'50509489'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'EUR'),#
						'50179489'	= c(Typ = 'KlientMedel', land = 'UK', Valuta = 'EUR'),#
						'50756869'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'NOK'),#
						'722424248' = c(Typ = 'Transaktion', land = 'SE', Valuta = 'SEK'),#
						'50757059'	= c(Typ = 'KlientMedel', land = 'UK', Valuta = 'NOK'),#
						'840009658'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'SEK'),#
						'90461249298'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'NOK'),#
						'8901112224'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'DKK'),#
						'31311001520968' = c(Typ = 'KlientMedel', land = 'FI', Valuta = 'EUR'),#
						'903816288'		= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'SEK'),#
						'875604218'		= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'SEK'),#
						'790636298'		= c(Typ = 'Transaktion', land = 'SE', Valuta = 'SEK')#
						)
Account			<- list(	'166-0232' 					= c(konto = "722424248", valuta = 'SEK', typ = 'Transaktion'),#
							'514-5420' 					= c(konto = "780764498", valuta = 'SEK', typ = 'Klientmedel'),#
							'576-8353' 					= c(konto = "840009658", valuta = 'SEK', typ = 'Klientmedel'),#
							'DE07514206000013482005'	= c(konto = "13482005", valuta = 'DE', typ = 'Transaktion'),#
							'FI1131311001520968'		= c(konto = "31311001520968", valuta = 'EUR', typ = 'Transaktion'),#
							'NO5190461249298'			= c(konto = "90461249298", valuta = 'NOK', typ = 'Transaktion'),#
							'SE2860000000000050509489' 	= c(konto = "50509489", valuta = 'EUR', typ = 'Klientmedel'),#
							'SE9160000000000050756869'  = c(konto = "50756869", valuta = 'NOK', typ = 'Klientmedel'),#
							'SE9360000000000050179489'	= c(konto = "50179489", valuta = 'EUR', typ = 'Klientmedel')#
)#
TransType 		<- list('NMSC' = 'Miscellaneous',#
						'NTRF' = 'Transfers (I/O local payments)',#
						'NCRO' = 'Cross-border (I/O payments)',#
						'NLOC' = 'Local payment (I/O)',#
						'NCHG' = 'Transaction type')						#
#
Query		<- sprintf("SELECT * FROM kriita_survey.Payment");#
#
Payments	<- getData(query = Query)#
for( i in 1:length(TransType))#
{#
	Step1 	<- TransType[i]#
	Payments[grepl(names(Step1), TransaktionRest), Type := Step1]	#
}#
#
for( i in 1:length(BankAccount))#
{#
	Step1 	<- BankAccount[i]#
	Payments[grepl(names(Step1), AccountId), Valuta := Step1[[1]][[3]]]	#
}#
Payments 	<- merge(Payments, Rates, by.x = 'Valuta', by.y = 'Currency', all = TRUE)			#
Payments[is.na(Rates) , Rates := 1]#
Query		<- sprintf("SELECT * FROM Balance");#
Balance		<- getData(query = Query ,dbname = "kriita_survey")#
Balance[, CloseBalance := as.numeric(gsub("([0-9\\.]+).*", "\\1", CloseBalance))]#
Months 			<- ErpInvoice[, .(	DateRange 	= unique(format(Bill_date, "%Y-%B")),#
								tmpRange 	= unique(format(Bill_date, "%Y-%m")))][order(tmpRange), DateRange]#
MonthsLow 			<- ErpInvoice[, .(	DateRange 	= unique(format(Bill_date, "%Y-%b")),#
							tmpRange 	= unique(format(Bill_date, "%Y-%m")))][order(tmpRange), DateRange]#
Comp	<- list('europaspelet' = c('europaspelet|superspelet|supervinsten|nordiska'),#
				'casinoroom' = c('casinoroom'),#
				'comeon' = c('comeon'),#
				'videoslots' = c('videoslots'),#
				'southbaygroup' = c('southbaygroup|testoplus|superdietten|sbg'),#
				'healthpills' = c('healthpills'),#
				'redkings' = c('redkings'),#
				'novus' = c('novus'),#
				'campus' = c('campus'),#
				'protectme' = c('protectme'),#
				'hem24'		= c('hem24'))#
ErpInvoice[, SiteId := ifelse(grepl("garantispelet.se", siteId), "europaspelet.se", #
							ifelse(grepl("garantispelet2.se", siteId), "europaspelet2.se", siteId ))]#
query		<- "SELECT * FROM Person"#
Person		<- getData(query = query)
###########################################################################################
# In this file the data manipulation will be handled, data will be sent#
# to #
###########################################################################################
options(scipen = 999)#
library(openxlsx)#
"pathSet"			<- function( x )#
{#
	if( is( x, "character"))#
	{#
		cmd				<- paste0("echo ", x)#
		cmd1			<-  pipe( cmd , open = "r")#
		path			<-   scan(cmd1, what = "character")  #
		close(cmd1)#
		return(path)#
	} else {#
	 	stop("Input is ", class( x ), " and not valid in")#
	}	#
}#
settlmentRules 	<- list( 	'cl' = 'cancelled',#
							'da' = 'AfterSettlementPeriod',#
							'dp' = 'AfterSettlementPeriodWhenPaid',#
							'ia'	= 'Immediately' ,#
							'ip' = 'ImmediatelyWhenPaid'#
	)#
#
FULLPATH		<- pathSet( x = "$PWD" )#
.HOME		<- dirname(FULLPATH)#
# Set the home diretory #
# All R-files #
RFiles 					<- list.files(path = .HOME, include.dirs = TRUE, pattern = "*.R$", #
											recursive = TRUE, full.names = TRUE)#
# Load common functions and files , DATA dir is where to send all data#
source(file = grep(".*RClass.*(?<=tion.R)", RFiles ,value = TRUE, perl = TRUE, ignore.case = TRUE) )#
hs1		<- createStyle(fgFill = "#DCE6F1", halign = "center", textDecoration = "Italic", border = "Bottom")#
#
hs2	<- createStyle(	#
		fgFill = "black", #
		fontSize = 12,#
		halign = "center", #
		textDecoration = "bold", #
			border = "Bottom")#
#
setValue 	<- function(name, colum, data, startRow = 2)#
{#
	addWorksheet( wb, name)#
	setColWidths(wb, sheet = name, cols = colum, widths = 22)#
	writeData(wb, sheet = name, data, startRow = startRow, headerStyle = hs1)#
}#
#
#system(Code)#
#
# Pkgs needed #
Packages			 	<- c("lubridate", 'data.table','reshape2', 'reshape',#
							'ggthemes', 'stargazer', 'RColorBrewer',#
							'extrafont', 'quantmod','openxlsx',#
							'ggplot2', 'scales', 'grid', 'gridExtra',"Hmisc",#
							 'dynlm', 'dplyr', 'RMySQL')#
## Set path and load pkgs#
Pack		<- new("startUps", pkgs = Packages, path = dirname(FULLPATH) )#
Pack$instant_pkgs()#
## Get the lastest rates from ExchangeRate #
Query 	<- sprintf("SELECT * FROM ExchangeRate WHERE #
				date = ( SELECT max(date) FROM ExchangeRate)")#
#
Rates 	<- getData(query = Query)#
## Change to swedish currency #
Rates[, Rates := Rates[currency == 'SEK', rate]/rate]#
Rates		<- Rates[,.(Currency = currency, Rates)]#
######################################################################################
# Load in conditions  #
######################################################################################
query					<- "SELECT mm.*, #
									ss.type AS TYPE, #
									ss.operatorId,#
									mcs.invoiceHoldPeriodRecurring,#
									mcs.invoicableStatuses FROM MeacodeMerchant mm #
						INNER JOIN Site ss ON (mm.merchantId = ss.siteId)#
						INNER JOIN MerchantCountrySettings mcs ON (mm.merchantId = mcs.merchantId AND #
																	mm.country = mcs.country)"
Meacode					<- getData(query = query)#
setnames(Meacode, c('invoiceFee', 'reminderFee'), c('CondinvoiceFee', 'CondreminderFee'))#
Meacode[, TYPE := ifelse(grepl("RISK", TYPE), 'NoRisk', #
							ifelse(grepl("NORMAL", TYPE), "Risk", TYPE) )]#
Meacode[grepl("Risk", TYPE), Risk := 1]			#
Meacode[grepl("NoRisk", TYPE), Risk := 0]#
#
Meacode[grepl("store" , storeId), operatorId := 'Store']#
Meacode[, c('createdAt','expiresAt','invoiceCurrency') := NULL]#
Company	<- list( 'UK' = c(	"comeon","bertil", "vinnarum", #
							"casinoroom","redkings","svenskalottoportalen",#
							"3hholdings","garantispelet","videoslots",#
							"europaspelet","garantispelet","supervinsten",#
							"superspelet") )#
#################################################################################### 			#
# MySQL cmds #
# dbListTables(con) = list all tables in above connection#
# dbListFields(con, DBtable) = list of all columns in table#
####################################################################################	#
## This is by each transaction#
StartDate		<- "2013-05-14"#
CurrentDate		<- Sys.Date( )#
Query	<- sprintf("SELECT CONCAT(inv.siteId, '.', LOWER(ei.country)) AS siteId ,#
							ei.invoiceCurrency AS Currency,#
							inv.ocrNumber, #
							inv.playerId,#
							ei.clientStatus AS status,#
							inv.toAccount,#
							et.* FROM ErpTransaction et #
						INNER JOIN ErpInvoice ei ON (ei.invoiceNumber = et.invoiceNumber)#
						INNER JOIN Invoice inv ON(inv.invoiceNumber = et.invoiceNumber)",#
					 	StartDate);#
#
Step1 		<- getData(query = Query )
Step1		<- Step1[!siteId %like% "(kriita|3h)"]#
for( i in 1:length(settlmentRules))#
{#
	first_		<- settlmentRules[i]#
	Step1[grepl(names(first_), settlementRule), settlementRuleString :=  first_]#
}#
#
Step1		<- merge(Step1, Rates, by.x = "currency", by.y = 'Currency', all = TRUE)#
Step1 		<- Step1[!is.na(siteId)]#
#
tmpMea		<- unique(Meacode[, .(storeId , TYPE , operatorId, country, settlementInterval, #
								settlementPeriod, transactionFeePercentage)], by = 'storeId')#
#
Step1		<- merge(Step1, tmpMea, by.x = "siteId", by.y = 'storeId', all.x = TRUE )#
rm(tmpMea)#
#
ErpTransaction		<- copy(Step1)#
ErpTransaction 		<- ErpTransaction[!is.na(invoiceNumber)]#
rm(Step1)#
######## Merge with SettlementDeduction#
query 							<- 'select * from SettlementDeduction'#
SettlementDeduction				<- getData(query = query)#
setnames(SettlementDeduction, 'amount', 'DeductedAmount')#
SettlementDeduction[, tmpVal := paste0(DeductedAmount, " (",  paidAt,")")]#
SettlementDeduction[order(paidAt), Count := 1:.N, by = .(transactionId)]#
#
Step2				<- dcast.data.table(SettlementDeduction[order(paidAt)] , transactionId ~ Count, value.var = 'tmpVal')#
#
Names				<- colnames(Step2)#
#
Names1				<- paste0("DeductionNr_", setdiff(Names, "transactionId"))#
setnames(Step2, 2:NCOL(Step2), Names1)#
#
ErpTransaction 		<- merge(ErpTransaction, Step2, by = 'transactionId', all.x = TRUE)#
SettlementDeduction[, tmpVal := NULL]#
#
rm(Step2)#
ErpTransaction 					<- ErpTransaction[!is.na(transactionId)]#
rm( query); gc(reset = TRUE)#
## Get each transaction, mulitple invoiceNr#
Query			<- sprintf("SELECT * FROM ErpPaymentHistory where paymentDate >= '%s'", StartDate)#
Step1 			<- getData(query = Query )#
Step1[, paymentDate := as.Date(paymentDate)]#
ErpPaymentHistory 	<- copy(Step1)#
rm(Step1)#
## ErpInvoice with Invoice #
Query 	<- sprintf("SELECT 	ei.*,#
							iv.state,#
							iv.siteId AS merchantId,#
							iv.toAccount,#
							iv.personId,#
							iv.playerId,#
							iv.dueDate,#
							iv.ocrNumber,#
							iv.ocrNumberReminder,#
							IF( ei.playingCurrency = 'EUR' #
									AND ei.invoiceCurrency = 'SEK', #
										ei.originalSettlementFee*ei.conversionRate, #
											ei.originalSettlementFee) AS TransactionFee#
							FROM ErpInvoice ei #
						INNER JOIN Invoice iv ON (ei.invoiceNumber = iv.invoiceNumber)#
						WHERE createdAt >= '%s'",  StartDate)			#
Step1 				<- getData(query = Query )#
Step1[, siteId := paste0(merchantId, '.', tolower(country))]#
Step1		<- Step1[!siteId %like% "(kriita|3h)"]
Step1[, ':=' ( Bill_date 			= as.Date(createdAt),#
				dueDate 			= as.Date(dueDate),#
				Payment_date		= as.Date(closureDate),#
				firstReminderDate 	= as.Date(firstReminderDate),#
				collectionDate		= as.Date(collectionDate)#
			 )]#
Step1[is.na(TransactionFee), TransactionFee := settlementFee]#
Step1[, ':=' ( #
			Bill_month		= format(Bill_date, "%Y-%b"),#
			Payment_month	= format(Payment_date, "%Y-%b")#
)]#
#
Step1			<- merge(Step1, Rates, by.x = 'invoiceCurrency', by.y = "Currency", all = TRUE)#
#
Meacode1		<- Meacode[, -c('invoiceCustomerSupport','senderEmail','storeContact','storeLogo','brand','storeStreet', 'storeWww','transactionDateFormat'), with = FALSE]#
ErpInvoice				<- merge(Step1, Meacode1, by.x = c('merchantId',"siteId","country"), by.y = c('merchantId','storeId',"country"), all.x = TRUE)					#
ErpInvoice 				<- ErpInvoice[!is.na(personId)]#
#
## Estimate the realmoney and get the last date #
moneyDT					<-   ErpPaymentHistory[grepl('(m|r)',type) , .(money = SUM(amount), moneyDate =  paymentDate[.N]), by = .(invoiceNumber)]#
#
ErpInvoice 				<- merge(ErpInvoice, moneyDT, by = 'invoiceNumber', all.x = TRUE)#
ErpInvoice[is.na(money), money := 0]#
rm(moneyDT)#
compensationDT			<-  ErpPaymentHistory[grepl('c|e|p', type), .(compensation = SUM(amount), compensationDate = paymentDate[.N]), by = .(invoiceNumber)]#
ErpInvoice 				<- merge(ErpInvoice, compensationDT, by = 'invoiceNumber', all.x = TRUE)#
ErpInvoice[is.na(compensation), compensation := 0]#
ErpInvoice 		<- ErpInvoice[!personId %like% '\\b(311|1115|70594)\\b', ]#
rm(compensationDT)#
ErpPaymentHistory 		<- merge(ErpPaymentHistory, #
									ErpInvoice[,.(invoiceNumber, TYPE , operatorId, siteId, merchantId, country)],#
								 by = 'invoiceNumber', all.x = TRUE)#
#
ErpPaymentHistory		<- ErpPaymentHistory[!is.na(siteId)]#
PaymentRule		<- list(	'c' = 'compensation',#
							'r' = 'reference',#
							'm' = 'manual payment',#
							'e' = 'creditor compensation',#
							'p' = 'past payment'#
)#
DeductionRule	<- list( 	'co' = 'COMPENSATION',#
							'pc' = 'PAPER_INVOICE_CHARGE',#
							'ci' = 'COMPENSATION_INTEREST',#
							'cr' = 'COMPENSATION_REMINDER',#
							'cf' = 'INVOICING_CHARGE',#
							'cl' = 'CANCELLATION',#
							'ma' = 'MANUAL_DEDUCTION',#
							'fb' = 'fallbackDeliveryCharge')#
setkey(ErpInvoice, personId)#
ErpInvoice[, InvoiceNr := .N, by = .(personId)]#
ErpInvoice[, tmp := 1L]#
## Add up each by unique customer, based on personId#
ErpInvoice[order(Bill_date), Count:= cumsum(tmp), by = .(personId)]#
## Divided each of the revenues#
ErpInvoice[, ':=' ( Revenue  = invoiceFee + TransactionFee + reminderFee + interest ) ]#
Regex		<- paste0(Company$UK, collapse = "|")#
ErpInvoice[siteId %like% Regex, Company := "UK"]	#
ErpInvoice[is.na(Company), Company := 'AB']	#
#
ErpTransaction		<- merge(ErpTransaction, ErpInvoice[, .(invoiceNumber, playerId, #
															Erp_createdAt = createdAt,#
															Company,	Risk)], by = c('invoiceNumber', 'playerId'),#
												all.x = TRUE)#
BankAccount		<- list('780764498' = c(Typ = 'KlientMedel', land = 'UK', Valuta = 'SEK'),#
						'50509489'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'EUR'),#
						'50179489'	= c(Typ = 'KlientMedel', land = 'UK', Valuta = 'EUR'),#
						'50756869'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'NOK'),#
						'722424248' = c(Typ = 'Transaktion', land = 'SE', Valuta = 'SEK'),#
						'50757059'	= c(Typ = 'KlientMedel', land = 'UK', Valuta = 'NOK'),#
						'840009658'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'SEK'),#
						'90461249298'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'NOK'),#
						'8901112224'	= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'DKK'),#
						'31311001520968' = c(Typ = 'KlientMedel', land = 'FI', Valuta = 'EUR'),#
						'903816288'		= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'SEK'),#
						'875604218'		= c(Typ = 'KlientMedel', land = 'SE', Valuta = 'SEK'),#
						'790636298'		= c(Typ = 'Transaktion', land = 'SE', Valuta = 'SEK')#
						)	#
Account			<- list(	'166-0232' 					= c(konto = "722424248", valuta = 'SEK', typ = 'Transaktion'),#
							'514-5420' 					= c(konto = "780764498", valuta = 'SEK', typ = 'Klientmedel'),#
							'576-8353' 					= c(konto = "840009658", valuta = 'SEK', typ = 'Klientmedel'),#
							'DE07514206000013482005'	= c(konto = "13482005", valuta = 'DE', typ = 'Transaktion'),#
							'FI1131311001520968'		= c(konto = "31311001520968", valuta = 'EUR', typ = 'Transaktion'),#
							'NO5190461249298'			= c(konto = "90461249298", valuta = 'NOK', typ = 'Transaktion'),#
							'SE2860000000000050509489' 	= c(konto = "50509489", valuta = 'EUR', typ = 'Klientmedel'),#
							'SE9160000000000050756869'  = c(konto = "50756869", valuta = 'NOK', typ = 'Klientmedel'),#
							'SE9360000000000050179489'	= c(konto = "50179489", valuta = 'EUR', typ = 'Klientmedel')#
)#
TransType 		<- list('NMSC' = 'Miscellaneous',#
						'NTRF' = 'Transfers (I/O local payments)',#
						'NCRO' = 'Cross-border (I/O payments)',#
						'NLOC' = 'Local payment (I/O)',#
						'NCHG' = 'Transaction type')						#
#
Query		<- sprintf("SELECT * FROM kriita_survey.Payment");#
#
Payments	<- getData(query = Query)#
for( i in 1:length(TransType))#
{#
	Step1 	<- TransType[i]#
	Payments[grepl(names(Step1), TransaktionRest), Type := Step1]	#
}#
#
for( i in 1:length(BankAccount))#
{#
	Step1 	<- BankAccount[i]#
	Payments[grepl(names(Step1), AccountId), Valuta := Step1[[1]][[3]]]	#
}#
Payments 	<- merge(Payments, Rates, by.x = 'Valuta', by.y = 'Currency', all = TRUE)			#
Payments[is.na(Rates) , Rates := 1]#
Query		<- sprintf("SELECT * FROM Balance");#
Balance		<- getData(query = Query ,dbname = "kriita_survey")#
Balance[, CloseBalance := as.numeric(gsub("([0-9\\.]+).*", "\\1", CloseBalance))]#
Months 			<- ErpInvoice[, .(	DateRange 	= unique(format(Bill_date, "%Y-%B")),#
								tmpRange 	= unique(format(Bill_date, "%Y-%m")))][order(tmpRange), DateRange]#
MonthsLow 			<- ErpInvoice[, .(	DateRange 	= unique(format(Bill_date, "%Y-%b")),#
							tmpRange 	= unique(format(Bill_date, "%Y-%m")))][order(tmpRange), DateRange]#
Comp	<- list('europaspelet' = c('europaspelet|superspelet|supervinsten|nordiska'),#
				'casinoroom' = c('casinoroom'),#
				'comeon' = c('comeon'),#
				'videoslots' = c('videoslots'),#
				'southbaygroup' = c('southbaygroup|testoplus|superdietten|sbg'),#
				'healthpills' = c('healthpills'),#
				'redkings' = c('redkings'),#
				'novus' = c('novus'),#
				'campus' = c('campus'),#
				'protectme' = c('protectme'),#
				'hem24'		= c('hem24'))#
ErpInvoice[, SiteId := ifelse(grepl("garantispelet.se", siteId), "europaspelet.se", #
							ifelse(grepl("garantispelet2.se", siteId), "europaspelet2.se", siteId ))]#
query		<- "SELECT * FROM Person"#
Person		<- getData(query = query)
Query 	<- sprintf("SELECT * FROM ExchangeRate WHERE #
				date = ( SELECT max(date) FROM ExchangeRate)")#
#
Rates 	<- getData(query = Query)
###########################################################################################
# In this file the data manipulation will be handled, data will be sent#
# to #
###########################################################################################
options(scipen = 999)#
library(openxlsx)#
"pathSet"			<- function( x )#
{#
	if( is( x, "character"))#
	{#
		cmd				<- paste0("echo ", x)#
		cmd1			<-  pipe( cmd , open = "r")#
		path			<-   scan(cmd1, what = "character")  #
		close(cmd1)#
		return(path)#
	} else {#
	 	stop("Input is ", class( x ), " and not valid in")#
	}	#
}#
settlmentRules 	<- list( 	'cl' = 'cancelled',#
							'da' = 'AfterSettlementPeriod',#
							'dp' = 'AfterSettlementPeriodWhenPaid',#
							'ia' = 'Immediately' ,#
							'ip' = 'ImmediatelyWhenPaid'#
	)#
PaymentRule		<- list(	'c' = 'compensation',#
							'r' = 'reference',#
							'm' = 'manual_payment',#
							'e' = 'creditor_compensation',#
							'p' = 'past_payment'#
)#
#
DeductionRule	<- list( 	'co' = 'COMPENSATION',#
							'pc' = 'PAPER_INVOICE_CHARGE',#
							'ci' = 'COMPENSATION_INTEREST',#
							'cr' = 'COMPENSATION_REMINDER',#
							'cf' = 'INVOICING_CHARGE',#
							'cl' = 'CANCELLATION',#
							'ma' = 'MANUAL_DEDUCTION',#
							'fb' = 'fallbackDeliveryCharge',#
							'si' = 'Interest_settlement',#
							'sr' = 'Reminder_charge_settlement',#
							'rh' = 'Reserve_hold',#
							'rr' = 'Reserve release')#
#
if(FALSE)#
{#
rule			<- data.table()#
for( i in c("settlmentRules", "DeductionRule", "PaymentRule"))#
{#
	rules 		<- get(i)#
	for( z in 1:length(rules) )#
	{#
		step1		<- rules[z]#
		rule		<- rbind(rule, data.table(rules = gsub("(.*)R.*", "\\1", i), shortcut = names(step1), translation = step1))#
	}#
}#
rule[, translation := toupper(translation)]	#
write.csv(rule, file = 'rule.csv', row.names = FALSE )#
#
}#
FULLPATH		<- pathSet( x = "$PWD" )#
.HOME		<- dirname(FULLPATH)#
# Set the home diretory #
# All R-files #
RFiles 					<- list.files(path = .HOME, include.dirs = TRUE, pattern = "*.R$", #
											recursive = TRUE, full.names = TRUE)#
# Load common functions and files , DATA dir is where to send all data#
source(file = grep(".*RClass.*(?<=tion.R)", RFiles ,value = TRUE, perl = TRUE, ignore.case = TRUE) )#
hs1		<- createStyle(fgFill = "#DCE6F1", halign = "center", textDecoration = "Italic", border = "Bottom")#
#
hs2	<- createStyle(	#
		fgFill = "black", #
		fontSize = 12,#
		halign = "center", #
		textDecoration = "bold", #
			border = "Bottom")#
#
setValue 	<- function(name, colum, data, startRow = 2)#
{#
	addWorksheet( wb, name)#
	setColWidths(wb, sheet = name, cols = colum, widths = 22)#
	writeData(wb, sheet = name, data, startRow = startRow, headerStyle = hs1)#
}#
#
#system(Code)#
#
# Pkgs needed #
Packages			 	<- c("lubridate", 'data.table','reshape2', 'reshape',#
							'ggthemes', 'stargazer', 'RColorBrewer',#
							'extrafont', 'quantmod','openxlsx',#
							'ggplot2', 'scales', 'grid', 'gridExtra',"Hmisc",#
							 'dynlm', 'dplyr', 'RMySQL')#
## Set path and load pkgs#
Pack		<- new("startUps", pkgs = Packages, path = dirname(FULLPATH) )#
Pack$instant_pkgs()#
## Get the lastest rates from ExchangeRate #
Query 	<- sprintf("SELECT * FROM ExchangeRate WHERE #
				date = ( SELECT max(date) FROM ExchangeRate)")#
#
Rates 	<- getData(query = Query)#
## Change to swedish currency
Rates
Rates[currency == 'SEK', rate]
Rates[, Rates := Rates[currency == 'SEK', rate]/rate]
Rates
InvoiceState = getData(query = 'SELECT  invoiceNumber, toState, created FROM InvoiceStateLog');
InvoiceState
InvoiceState[, .N, by = .(invoiceNumber)]
InvoiceState[invoiceNumber == '13020']
InvoiceState = getData(query = "SELECT  invoiceNumber, toState, created FROM InvoiceStateLog WHERE toState RLIKE '(INVOICED|INVOICE_SENT)'");
InvoiceState[, .N, by = .(invoiceNumber)]
InvoiceState[, .N, by = .(invoiceNumber)][ N > 1]
InvoiceState[invoiceNumber == '10002100014']
InvoiceState[invoiceNumber == '10048121952']
InvoiceState = getData(query = "SELECT  invoiceNumber, toState, created FROM InvoiceStateLog WHERE toState RLIKE '^(INVOICED|INVOICE_SENT)$'");
InvoiceState[, .N, by = .(invoiceNumber)][ N > 1]
InvoiceState[invoiceNumber == '10403142017']
InvoiceState[invoiceNumber == '10395100760']
InvoiceState[invoiceNumber == '12417102838']
library( methods )
install.packages("dplyr")
library(Rcpp)
update.packages()
y
install.packages("devtools")
install.packages("openxlsx")
install.packages(c("reshape2", "dynlm","scales","ggplot2"))
install.packages(c("lubridate", "gridExtra","grid","Hmisc"))
install.packages("data.table", type = "source",#
    repos = "http://Rdatatable.github.io/data.table")
library(openxlsx)
install.packages("data.table", type = "source",#
    repos = "http://Rdatatable.github.io/data.table")
install.packages("data.table", type = "source",#
    repos = "http://Rdatatable.github.io/data.table")
library(data.table)
install.packages(c("RMySQL"))
